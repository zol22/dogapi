{"version":3,"sources":["components/home/dog.png","components/plaintext/plaintext.js","components/dog-image/dog-image.js","components/select/select.js","App.js","components/home/homepage.js","serviceWorker.js","index.js"],"names":["module","exports","PlainText","props","inputText","text","plaintext","replace","className","Dog","state","imageUrl","selectedDog","description","fetchImage","a","fetch","breed","response","json","data","message","setState","fetchDescription","query","search","snippet","this","src","alt","Component","Select","handleChange","event","onSelect","target","value","dogList","onChange","map","index","key","error","alert","App","componentDidMount","ok","Object","keys","selectHandler","Home","useState","load","setLoad","dog","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.9b8769f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dog.bb5574e8.png\";","import React from \"react\";\nimport \"./plaintext.css\";\nconst PlainText = props => {\n  const inputText = props.text;\n  if (!inputText) {\n    return null;\n  }\n  const plaintext = inputText\n    .replace(/<[^>]*>?/gm, \"\")\n    .replace(/\\&quot\\;/gm, \"'\");\n  return <p className=\"plaintext\">(from wikipedia) {plaintext} ...</p>;\n};\n\nexport default PlainText;\n","import React, { Component } from \"react\";\nimport \"./dog-image.css\";\nimport PlainText from \"../plaintext/plaintext\";\n\nclass Dog extends Component {\n  state = {\n    imageUrl: null,\n    selectedDog: null,\n    description: \"\"\n  };\n\n  componentDidUpdate() {\n    if (this.props.breed !== this.state.selectedDog) {\n      this.setState({\n        selectedDog: this.props.breed\n      });\n      this.fetchImage();\n      this.fetchDescription();\n    }\n  }\n  fetchImage = async () => {\n    const response = await fetch(\n      `https://dog.ceo/api/breed/${this.props.breed}/images/random`\n    );\n    const data = await response.json();\n    const imageUrl = data.message;\n    this.setState({\n      imageUrl: imageUrl\n    });\n  };\n\n  fetchDescription = async () => {\n    const response = await fetch(\n      `https://en.wikipedia.org/w/api.php?origin=*&format=json&explaintext&prop=extracts&explaintext&exintro&action=query&list=search&srsearch=${this.props.breed}%20dog`\n    );\n    const data = await response.json();\n    this.setState({\n      description: data.query.search[0].snippet\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"image-container\">\n          {this.state.selectedDog ? (\n            <img\n              className=\"image-card\"\n              src={this.state.imageUrl}\n              alt=\"dogImage\"\n            ></img>\n          ) : null}\n          <PlainText text={this.state.description} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Dog;\n","import React from \"react\";\nimport \"./select.css\";\nimport \"../dog-image/dog-image.css\";\n\nconst Select = props => {\n  const getErrorView = () => {\n    return alert(\"Sorry, cannot display the data\");\n  };\n\n  const handleChange = event => {\n    props.onSelect(event.target.value);\n  };\n\n  const getSelectView = () => {\n    return (\n      <div className=\"select\">\n        <h1 className=\"header\">Select your doggy</h1>\n        <select onChange={handleChange} className=\"breed-select\">\n          {props.dogList.map((breed, index) => {\n            return (\n              <option value={breed} key={index}>\n                {breed}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n    );\n  };\n  return (\n    <div className=\"select-container\">\n      {props.dogList ? getSelectView() : null}\n      {props.error ? getErrorView : null}\n    </div>\n  );\n};\n\nexport default Select;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Dog from \"./components/dog-image/dog-image\";\nimport Select from \"./components/select/select\";\n\nclass App extends Component {\n  state = {\n    dogList: null,\n    selectedDog: null,\n    error: false\n  };\n\n  componentDidMount = async () => {\n    try {\n      const response = await fetch(\"https://dog.ceo/api/breeds/list/all\");\n      if (response.ok) {\n        const data = await response.json();\n        this.setState({\n          dogList: Object.keys(data.message)\n        });\n      } else {\n        this.setState({ error: true });\n        alert(\"Sorry, cannot display the data\");\n      }\n    } catch (e) {\n      this.setState({ error: true });\n      alert(\"Sorry, cannot display the data\");\n    }\n  };\n\n  selectHandler = breed => {\n    this.setState({\n      selectedDog: breed\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Select\n          dogList={this.state.dogList}\n          onSelect={this.selectHandler}\n          error={this.state.error}\n        />\n        <Dog breed={this.state.selectedDog} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { useState } from \"react\";\nimport \"./homepage.css\";\nimport dog from \"./dog.png\";\nimport App from \"../../App\";\n\nconst Home = () => {\n  const [load, setLoad] = useState(false);\n  const onload = () => {\n    setLoad(!load);\n  };\n\n  return (\n    <div className=\"home\">\n      <img className=\"dog-icon-img\" src={dog} alt=\"dog-icon\"></img>\n\n      <h2 className=\"dog-breed-title\">Dog Breed Finder</h2>\n      <button onClick={onload} className=\"start\">\n        Start\n      </button>\n\n      <div>{load ? <App /> : null}</div>\n    </div>\n  );\n};\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport Home from \"./components/home/homepage\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Home />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}